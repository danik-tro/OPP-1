GNAT Community 2020 (20200818-93)
Copyright 1992-2020, Free Software Foundation, Inc.

Compiling: data.adb
Source file time stamp: 2020-09-17 09:06:12
Compiled at: 2020-09-17 12:09:17

     1. --------------Package Data, body---------------
     2.
     3. with Ada.Text_IO, Ada.Integer_Text_IO;
     4. use Ada.Text_IO, Ada.Integer_Text_IO;
     5.
     6. package body Data is 
     7.    
     8.    
     9.    
    10.    --Max in Matrix
    11.    function Matrix_Max(A: in Matrix) return Integer is
    12.       Max_m : Integer := -10000;
    13.    begin
    14.       for i in 1..n loop
    15.          for j in 1..n loop
    16.             if A(i)(j) > Max_m then 
    17.                Max_m := A(i)(j);
    18.             end if;
    19.          end loop;
    20.       end loop;
    21.       return Max_m;
    22.    end Matrix_Max;
    23.       
    24.    --Min in Matrix
    25.    function Matrix_Min(A: in Matrix) return Integer is
    26.       Min_m : Integer := 10000;
    27.    begin
    28.       for i in 1..n loop
    29.          for j in 1..n loop
    30.             if A(i)(j) < Min_m then 
    31.                Min_m := A(i)(j);
    32.             end if;
    33.          end loop;
    34.       end loop;
    35.       return Min_m;
    36.    end Matrix_Min;
    37.    
    38.    -- Read Vector
    39.    procedure Vector_Input(A: out Vector) is 
    40.    begin
    41.       for i in 1..n loop
    42.          Get(A(i));
    43.       end loop;
    44.    end Vector_Input;
    45.      
    46.    -- Write Vector on Screen
    47.    procedure Vector_Output(A: in Vector) is
    48.    begin
    49.       for i in 1..n loop
    50.          Put(A(i));
    51.          Put(" ");
    52.       end loop;
    53.    end Vector_Output;
    54.    
    55.    -- Read Matrix
    56.    procedure Matrix_Input(A: out Matrix) is
    57.    begin
    58.       for i in 1..n loop
    59.          for j in 1..n loop
    60.             Get(A(i)(j));
    61.          end loop;
    62.       end loop;
    63.    end Matrix_Input;
    64.    
    65.    -- Write Matrix on Screen
    66.    procedure Matrix_Output(A: in Matrix) is
    67.    begin
    68.       for i in 1..n loop
    69.          for j in 1..n loop
    70.             Put(A(i)(j));
    71.             Put(" ");
    72.          end loop;
    73.          Put_Line(" ");
    74.       end loop;
    75.    end Matrix_Output;
    76.    
    77.    -- Multiplication of matrces
    78.    
    79.    function Matrix_Multiplication(A, B : in Matrix) return Matrix is
    80.       P: Matrix;
    81.       S: Integer;
    82.    begin
    83.       for k in 1..n loop
    84.          for i in 1..n loop
    85.             s := 0;
    86.             for j in 1..n loop
    87.                S := S + A(k)(j) * B(j)(i);
    88.                P(k)(i) := s;
    89.             end loop;
    90.          end loop;
    91.       end loop;
    92.       return P;
    93.    end Matrix_Multiplication;
    94.    
    95.    -- Multiplication of vector and Matrix
    96.    function Vector_Matrix_Multiplication(A: in Vector; B: in Matrix) return Vector is
    97.       P: Vector;
    98.       s: Integer;
    99.    begin
   100.       for i in 1..n loop
   101.          s := 0;
   102.          for j in 1..n loop
   103.             s := s + A(i)*B(j)(i);
   104.          end loop;
   105.          
   106.          P(i) := s;
   107.       end loop;
   108.       return P;
   109.    end Vector_Matrix_Multiplication;
   110.    
   111.    
   112.    -- Sum of Vectors
   113.    function Vector_Sum(A, B: in Vector) return Vector is
   114.       S: Vector;
   115.    begin
   116.       for i in 1..n loop
   117.          s(i) := A(i) + B(i);
   118.       end loop;
   119.       return s;
   120.    end Vector_Sum;
   121.    
   122.    -- Multiplication of vectors
   123.    function Vector_Multiplication(A, B: in Vector) return Integer is
   124.       s: Integer;
   125.    begin
   126.       s := 0;
   127.       for i in 1..n loop
   128.          s := s + A(i) * B(i);
   129.       end loop;
   130.       return s;
   131.    end Vector_Multiplication;
   132.    
   133.    
   134.    
   135.    -- Sorting of Vector
   136.    procedure Vector_Sorting(A: in out Vector) is
   137.       S: Integer;
   138.    begin
   139.       for i in 1..n loop
   140.          for j in 1..n loop
   141.             
   142.             if A(i) > A(j) then 
   143.                S := A(j);
   144.                A(j) := A(i);
   145.                A(i) := S;
   146.             end if;
   147.             
   148.          end loop;
   149.       end loop;
   150.       
   151.    end Vector_Sorting;
   152.    
   153.    -- Sorting Matrix
   154.    procedure Matrix_Sorting(A: in out Matrix) is
   155.    begin
   156.       for i in 1..n loop
   157.          Vector_Sorting(A(i));
   158.       end loop;
   159.    end Matrix_Sorting;
   160.    
   161.    
   162.    --Sum Matrices
   163.    function Sum_Matrix(A, B: in Matrix) return Matrix is
   164.       C : Matrix;
   165.    begin
   166.       for i in 1..n loop
   167.          for j in 1..n loop
   168.             C(i)(j) := A(i)(j) + B(i)(j);
   169.          end loop;
   170.       end loop;
   171.       return C;
   172.    end Sum_Matrix;
   173.    
   174.    --Sub Matrices
   175.    function Sub_Matrix(A, B: in Matrix) return Matrix is
   176.       C : Matrix;
   177.    begin
   178.       for i in 1..n loop
   179.          for j in 1..n loop
   180.             C(i)(j) := A(i)(j) - B(i)(j);
   181.          end loop;
   182.       end loop;
   183.       return C;
   184.    end Sub_Matrix;
   185.             
   186.    
   187.    -- Transposition of Matrix
   188.    procedure Matrix_Transposition(A: in out Matrix) is 
   189.       S: Integer;
   190.    begin
   191.       for i in 1..n loop
   192.          for j in 1..n loop
   193.             S := A(j)(i);
   194.             A(j)(i) := A(i)(j);
   195.             A(i)(j) := S;
   196.             
   197.          end loop;
   198.       end loop;
   199.    end Matrix_Transposition;
   200.    
   201.    -- Filling matrix with ones
   202.    procedure Matrix_Filling_Ones(A: out Matrix) is 
   203.    begin
   204.       for i in 1..n loop
   205.          for j in 1..n loop
   206.             A(i)(j) := 1;
   207.          end loop;
   208.       end loop;
   209.    end Matrix_Filling_Ones;
   210.    
   211.    -- Filling vector with ones
   212.    procedure Vector_Filling_Ones(A: out Vector) is
   213.    begin
   214.       for i in 1..n loop
   215.          A(i) := 1;
   216.       end loop;
   217.    end Vector_Filling_Ones;
   218.    
   219.    
   220.    
   221.    procedure Matrix_Filling_Number(A: out Matrix; i, j, number:Integer) is 
   222.    begin
   223.       A(i)(j) := number;
   224.    end Matrix_Filling_Number;
   225.    
   226.    
   227.    procedure Vector_Fillig_Number(A: out Vector; i, number: Integer) is 
   228.    begin
   229.       A(i) := number;
   230.    end Vector_Fillig_Number;
   231.    
   232.    
   233.    
   234.    -- Calculation function 1
   235.    function Func1 (A, B, C: in Vector; MA, ME: in Matrix) return Integer is
   236.    begin
   237.       return Vector_Multiplication(A,
   238.                                Vector_Matrix_Multiplication(
   239.                                    Vector_Sum(B, c),
   240.                                    Matrix_Multiplication(MA, ME)
   241.                                   ));
   242.    end Func1;
   243.    
   244.    
   245.    -- Constant Matrix multiplication
   246.    procedure Constant_Matrix_Multiplication(a : Integer; B : in out Matrix) is
   247.    begin
   248.       for i in 1..n loop
   249.          for j in 1..n loop
   250.             B(i)(j) := B(i)(j) * a;
   251.          end loop;
   252.       end loop;
   253.    end Constant_Matrix_Multiplication;
   254.    
   255.    -- Constant Vector Multiplication
   256.    procedure Constant_Vector_Multiplication(a : Integer; B : in out Vector) is
   257.    begin
   258.       for i in 1..n loop
   259.          B(i) := B(i) * a;
   260.       end loop;
   261.    end Constant_Vector_Multiplication;
   262.    
   263.    --Calculate function 2
   264.    function Func2 (MH, MK, ML: in Matrix) return Matrix is 
   265.       MF : Matrix;
   266.    begin
   267.       MF := Matrix_Multiplication(MK, ML);
   268.       Constant_Matrix_Multiplication(Matrix_Min(MH), MF);
   269.       return MF;
   270.    end Func2;
   271.    
   272.    -- Calculate function 3   
   273.    function Func3 (V : in out Vector; MP, MR : in Matrix) return Vector is
   274.    begin
   275.       Constant_Vector_Multiplication(Matrix_Max(Matrix_Multiplication(MP, MR)), V);
   276.       return V;
   277.    end Func3; 
   278.  end Data;

Compiling: data.ads
Source file time stamp: 2020-09-17 09:05:06
Compiled at: 2020-09-17 12:09:17

     1. generic
     2.    n: Integer;
     3.
     4. package Data is
     5.    --- Declaration of private types
     6.    type Vector is private;
     7.    type Matrix is private;
     8.    
     9.    -- Read Vector
    10.    procedure Vector_Input(A: out Vector);
    11.    
    12.    -- Write Vector on screen
    13.    procedure Vector_Output(A: in Vector);
    14.    
    15.    -- Read Matrix
    16.    procedure Matrix_Input(A: out Matrix);
    17.    
    18.    -- Write Matrix on screen
    19.    procedure Matrix_Output(A: in Matrix);
    20.    
    21.    -- Calculation functions
    22.    function Func1 (A, B, C: in Vector; MA, ME: in Matrix) return Integer;
    23.    function Func2 (MH, MK, ML: in Matrix) return Matrix;
    24.    function Func3 (V : in out Vector; MP, MR : in Matrix) return Vector;
    25.    
    26.    -- Filling matrix with ones
    27.    procedure Matrix_Filling_Ones(A: out Matrix);
    28.    
    29.    -- Filling vector with ones
    30.    procedure Vector_Filling_Ones(A: out Vector);
    31.    
    32.    
    33.    procedure Matrix_Filling_Number(A: out Matrix; i,j, number:Integer);
    34.    
    35.    procedure Vector_Fillig_Number(A: out Vector; i, number:Integer);
    36.    
    37.    -- Determination private types
    38.    private
    39.      type Vector is array(1..n) of Integer;
    40.      type Matrix is array(1..n) of Vector;
    41.    
    42.    
    43.
    44. end Data;

 278 lines: No errors
